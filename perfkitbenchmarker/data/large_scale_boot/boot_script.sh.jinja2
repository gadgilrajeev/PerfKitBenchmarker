#! /bin/bash -xv

{# This is the shell script that launcher vms for large_scale_boot benchmark
uses to spin up vms. The vms are spun up with a startup script to curl a
listening server. The time taken to boot is the time between executing this
script and the time the vms call back on the server. #}

{% if contact_launcher %}
  LINUX_PING="curl -H 'X-Header: {{ launcher_vm_name }}' http://{{ server_ip }}:{{ server_port }}"
  WINDOWS_PING="Invoke-WebRequest -Uri '{{ server_ip }}:{{ server_port }}' -Headers @{'X-Header'='{{ launcher_vm_name }}'}"
{% else %}
  LINUX_PING=""
  WINDOWS_PING=""
{% endif %}
export LINUX_SLEEP="# Sleep 10min before final cleanup and VM termination.
sleep {{ timeout }}"
export WINDOWS_SLEEP="# Sleep 10min before final cleanup and VM termination.
Start-Sleep -Seconds {{ timeout }}"
export GCP_DELETE_VM="{{ gcloud_path }} --quiet compute instances delete {{ boot_vm_name_prefix }}-$i --zone {{ zone }} --project {{ project }}
/sbin/shutdown -hP now"

{% if os_type == 'linux' %}
  export START_UP_SCRIPT="startup-script=#! /bin/bash
  ${LINUX_PING}
  ${LINUX_SLEEP}
  ${GCP_DELETE_VM}"
{% elif os_type == 'windows' %}
  export START_UP_SCRIPT="windows-startup-script-ps1=
  ${WINDOWS_PING}
  ${WINDOWS_SLEEP}
  ${GCP_DELETE_VM}"
{% endif %}

gcloud_args=(
--format json
--quiet
--async
--project {{ project }}
--scopes compute-rw
--network-interface no-address,network-tier=PREMIUM
--image-family {{ image_family }}
--image-project {{ image_project }}
--boot-disk-auto-delete
--boot-disk-size {{ boot_disk_size }}
--boot-disk-type pd-ssd
--machine-type {{ boot_machine_type }}
--tags perfkitbenchmarker
--no-restart-on-failure
--zone {{ zone }}
--metadata "${START_UP_SCRIPT}"
)

# Launcher VM record the system nanoseconds as start time.
echo $(date +%s%N) > {{start_time_file}}

# Launch some VMs
{% if cloud == 'GCP' %}
for i in {1..{{vm_count}}}; do
{{ gcloud_path }} compute instances create {{ boot_vm_name_prefix }}-$i  \
"${gcloud_args[@]}" &
done
{% endif %}

wait
